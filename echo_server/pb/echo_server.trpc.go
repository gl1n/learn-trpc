// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: echo_server.proto

package pb

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// EchoServerService defines service.
type EchoServerService interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoReply, error)
}

func EchoServerService_Echo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &EchoRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(EchoServerService).Echo(ctx, reqbody.(*EchoRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// EchoServerServer_ServiceDesc descriptor for server.RegisterService.
var EchoServerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "demo.echo_server.EchoServer",
	HandlerType: ((*EchoServerService)(nil)),
	Methods: []server.Method{
		{
			Name: "/demo.echo_server.EchoServer/Echo",
			Func: EchoServerService_Echo_Handler,
		},
	},
}

// RegisterEchoServerService registers service.
func RegisterEchoServerService(s server.Service, svr EchoServerService) {
	if err := s.Register(&EchoServerServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("EchoServer register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedEchoServer struct{}

func (s *UnimplementedEchoServer) Echo(ctx context.Context, req *EchoRequest) (*EchoReply, error) {
	return nil, errors.New("rpc Echo of service EchoServer is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// EchoServerClientProxy defines service client proxy
type EchoServerClientProxy interface {
	Echo(ctx context.Context, req *EchoRequest, opts ...client.Option) (rsp *EchoReply, err error)
}

type EchoServerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewEchoServerClientProxy = func(opts ...client.Option) EchoServerClientProxy {
	return &EchoServerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *EchoServerClientProxyImpl) Echo(ctx context.Context, req *EchoRequest, opts ...client.Option) (*EchoReply, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/demo.echo_server.EchoServer/Echo")
	msg.WithCalleeServiceName(EchoServerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("EchoServer")
	msg.WithCalleeMethod("Echo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &EchoReply{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
